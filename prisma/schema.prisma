// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enums
enum gender {
  male
  female
  others
}

// semester model
model AcademicSemester {
  id         String    @id @default(uuid())
  year       Int
  title      String
  code       String
  startMonth String
  endMonth   String
  // there will be many students under one academic semester !one to many
  students   Student[]

  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  semesterRegistrations SemesterRegistration[]

  @@map("academic_semesters")
}

// faculty model
model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  // there might be multiple departments under one faculty !one to many
  academicDepartments AcademicDepartment[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  // one department can have multiple students
  students            Student[]
  // one department can have multiple facculties
  faculties           Faculty[]

  @@map("academic_faculty")
}

// department model
model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  // many students can be there under one department
  students          Student[]
  // one department can have multiple facculties
  faculties         Faculty[]

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  offeredCourses OfferedCourse[]

  @@map("academic_department")
}

// student model
model Student {
  id           String @id @default(uuid())
  studentId    String
  firstName    String
  middleName   String
  lastName     String
  profileImage String
  email        String
  contactNo    String
  gender       gender
  bloodGroup   String

  academicSemesterId String
  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("students")
}

// faculty model
model Faculty {
  id           String @id @default(uuid())
  facultyId    String
  firstName    String
  middleName   String
  lastName     String
  profileImage String
  email        String
  contactNo    Int
  gender       gender
  bloodGroup   String
  designation  String

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])

  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  courseFaculties             CourseFaculty[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id                          String                       @id @default(uuid())
  roomNumber                  String
  floor                       String
  buildingId                  String
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  building                    Building                     @relation(fields: [buildingId], references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("rooms")
}

model Course {
  id              String                @id @default(uuid())
  title           String
  code            String
  credits         Int                   @default(0)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  preRequisite    CourseToPreRquisite[] @relation("CourseToPreRquisite")
  preRequisiteFor CourseToPreRquisite[] @relation("PrerquisiteToCourse")
  courseFaculties CourseFaculty[]
  offeredCourses  OfferedCourse[]

  @@map("courses")
}

model CourseToPreRquisite {
  courseId       String
  prerequisiteId String

  course       Course @relation(fields: [courseId], references: [id], name: "CourseToPreRquisite")
  prerequisite Course @relation(fields: [prerequisiteId], references: [id], name: "PrerquisiteToCourse")

  @@id([courseId, prerequisiteId])
}

model CourseFaculty {
  courseId  String
  facultyId String

  course  Course  @relation(fields: [courseId], references: [id])
  facutly Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

model SemesterRegistration {
  id                 String                     @id @default(uuid())
  startDate          DateTime
  endDate            DateTime
  status             SemesterRegistrationStatus @default(UPCOMING)
  minCredit          Int                        @default(0)
  maxCredit          Int                        @default(0)
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  academicSemesterId String

  academicSemester             AcademicSemester             @relation(fields: [academicSemesterId], references: [id])
  offeredCourses               OfferedCourse[]
  offeredCourseSections        OfferedCourseSection[]
  offeredCoursesClassSchedules OfferedCourseClassSchedule[]

  @@map("semester_registrations")
}

model OfferedCourse {
  id                     String   @id @default(uuid())
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  courseId               String
  academicDepartmentId   String
  semesterRegistrationId String

  course             Course             @relation(fields: [courseId], references: [id])
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  semesterRegistration  SemesterRegistration   @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseSections OfferedCourseSection[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                        String   @id @default(uuid())
  title                     String
  maxCapacity               Int
  currentlyEnrolledStudents Int      @default(0)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  offeredCourseId        String
  semesterRegistrationId String

  offeredCourse               OfferedCourse                @relation(fields: [offeredCourseId], references: [id])
  semesterRegistration        SemesterRegistration         @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("offered_course_sections")
}

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model OfferedCourseClassSchedule {
  id        String   @id @default(uuid())
  startTime String
  endTime   String
  dayOfWeek WeekDays @default(SATURDAY)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  offeredCourseSectionId String
  semesterRegistrationId String
  roomId                 String
  facultyId              String

  offeredCourseSection OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  room                 Room                 @relation(fields: [roomId], references: [id])
  faculty              Faculty              @relation(fields: [facultyId], references: [id])

  @@map("offered_course_class_schedules")
}
